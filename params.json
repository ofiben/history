{"name":"History","tagline":"","body":"history\r\n=======\r\nThis is the brief hostory about the human-computer relationship. \r\nand the basic fundamentals of the topics and sub topics as illustrated.\r\n\r\nDefinition of HCI {p. 5}\r\nThere is currently no agreed upon definition of the range of topics which form the area of human-computer interaction. Yet we need a characterization of the field if we are to derive and develop educational materials for it. Therefore we offer a working definition that at least permits us to get down to the practical work of deciding what is to be taught:\r\nHuman-computer interaction is a discipline concerned with the design, evaluation and implementation of interactive computing systems for human use and with the study of major phenomena surrounding them.\r\nFrom a computer science perspective, the focus is on interaction and specifically on interaction between one or more humans and one or more computational machines. The classical situation that comes to mind is a person using an interactive graphics program on a workstation. But it is clear that varying what is meant by interaction, human, and machine leads to a rich space of possible topics, some of which, while we might not wish to exclude them as part of human-computer interaction, we would, nevertheless, wish to identify as peripheral to its focus. Other topics we would wish to identify as more central.\r\nTake the notion of machine. Instead of workstations, computers may be in the form of embedded computational machines, such as parts of spacecraft cockpits or microwave ovens. Because the techniques for designing these interfaces bear so much relationship to the techniques for designing workstations interfaces, they can be profitably treated together. But if we weaken the computational and interaction aspects more and treat the design of machines that are mechanical and passive, such as the design of a hammer, we are clearly on the margins, and generally the relationships between humans and hammers would not considered part of human-computer interaction. Such relationships clearly would be part of general human factors, which studies the human aspects of all designed devices, but not the mechanisms of these devices. Human-computer interaction, by contrast, studies both the mechanism side and the human side, but of a narrower class of devices.\r\nOr consider what is meant by the notion human. If we allow the human to be a group of humans or an organization, we may consider interfaces for distributed systems, computer-aided communications between humans, or the nature of the work being cooperatively performed by means of the system. These are all generally regarded as important topics central within the sphere of human-computer interaction studies. If we go further down this path to consider job design from the point of view of the nature of the work and the nature of human satisfaction, then computers will only occasionally occur (when they are useful for these ends or when they interfere with these ends) and human-computer interaction is only one supporting area among others.\r\nThere are other disciplinary points of view that would place the focus of HCI differently than does computer science, just as the focus for a definition of the databases area would be different from a computer science vs. a business perspective. HCI in the large is an interdisciplinary area. It is emerging as a specialty concern within several disciplines, each with different emphases: computer science (application design and engineering of human interfaces), psychology (the application of theories of cognitive processes and the empirical analysis of user behavior), sociology and anthropology (interactions between technology, work, and organization), and industrial design (interactive products). In this report, we have adopted, as an ACM committee, an appropriate computer science point of view, although we have tried at the same time to consider human-computer interaction broadly enough that other disciplines could use our analysis and shift the focus appropriately. From a computer science perspective, other disciplines serve as supporting disciplines, much as physics serves as a supporting discipline for civil engineering, or as mechanical engineering serves as a supporting discipline for robotics. A lesson learned repeatedly by engineering disciplines is that design problems have a context, and that the overly narrow optimization of one part of a design can be rendered invalid by the broader context of the problem. Even from a direct computer science perspective, therefore, it is advantageous to frame the problem of human-computer interaction broadly enough so as to help students (and practitioners) avoid the classic pitfall of design divorced from the context of the problem.\r\nTo give a further rough characterization of human-computer interaction as a field, we list some of its special concerns: Human-computer interaction is concerned with the joint performance of tasks by humans and machines; the structure of communication between human and machine; human capabilities to use machines (including the learnability of interfaces); algorithms and programming of the interface itself; engineering concerns that arise in designing and building interfaces; the process of specification, design, and implementation of interfaces; and design trade-offs. Human-computer interaction thus has science, engineering, and design aspects.\r\nRegardless of the definition chosen, HCI is clearly to be included as a part of computer science and is as much a part of computer science as it is a part of any other discipline. If, for example, one adopts Newell, Perlis, and Simon's (1967) classic definition of computer science as \"the study of computers and the major phenomena that surround them,\" then the interaction of people and computers and the uses of computers are certainly parts of those phenomena. If, on the other hand, we take the recent ACM (Denning, et al., 1988) report's definition as \"the systematic study of algorithmic processes that describe and transform information: their theory, analysis, design, efficiency, implementation, and application,\" then those algorithmic processes clearly include interaction with users just as they include interaction with other computers over networks. The algorithms of computer graphics, for example, are just those algorithms that give certain experiences to the perceptual apparatus of the human. The design of many modern computer applications inescapably requires the design of some component of the system that interacts with a user. Moreover, this component typically represents more than half a system's lines of code. It is intrinsically necessary to understand how to decide on the functionality a system will have, how to bring this out to the user, how to build the system, how to test the design.\r\nBecause human-computer interaction studies a human and a machine in communication, it draws from supporting knowledge on both the machine and the human side. On the machine side, techniques in computer graphics, operating systems, programming languages, and development environments are relevant. On the human side, communication theory, graphic and industrial design disciplines, linguistics, social sciences, cognitive psychology, and human performance are relevant. And, of course, engineering and design methods are relevant.\r\n2.2 Field of HCI {p. 8}\r\nThe goal of this section is to provide background for this report in terms of some of the major themes and influences that have shaped the field of HCI. In addition, an attempt is made to project some current trends into the near future as a basis for anticipating some of the conditions with which students will be faced upon, or even before, graduation. This section is not intended to provide either an exhaustive history of the past or a full scale \"futures projection.\" It is, rather, to provide a context for the recommendations which follow.\r\n2.2.1 Historical Roots {p. 8}\r\nHuman-computer interaction arose as a field from intertwined roots in computer graphics, operating systems, human factors, ergonomics, industrial engineering, cognitive psychology, and the systems part of computer science. Computer graphics was born from the use of CRT and pen devices very early in the history of computers. This led to the development of several human-computer interaction techniques. Many techniques date from Sutherland's Sketchpad Ph.D. thesis (1963) that essentially marked the beginning of computer graphics as a discipline. Work in computer graphics has continued to develop algorithms and hardware that allow the display and manipulation of ever more realistic-looking objects (e.g., CAD/CAM machine parts or medical images of body parts). Computer graphics has a natural interest in HCI as \"interactive graphics\" (e.g., how to manipulate solid models in a CAD/CAM system).\r\nA related set of developments were attempts to pursue \"man-machine symbiosis\" (Licklider, 1960), the \"augmentation of human intellect\" (Engelbart, 1963), and the \"Dynabook\" (Kay and Goldberg, 1977). Out of this line of development came a number of important building blocks for human-computer interaction. Some of these building blocks include the mouse, bitmapped displays, personal computers, windows, the desktop metaphor, and point-and-click editors (see Baecker & Buxton, 1987, Chapter 1).\r\nWork on operating systems, meanwhile, developed techniques for interfacing input/output devices, for tuning system response time to human interaction times, for multiprocessing, and for supporting windowing environments and animation. This strand of development has currently given rise to \"user interface management systems\" and \"user interface toolkits\".\r\nHuman factors, as a discipline, derives from the problems of designing equipment operable by humans during World War II (Sanders & McCormick, 1987). Many problems faced by those working on human factors had strong sensory-motor features (e.g., the design of flight displays and controls). The problem of the human operation of computers was a natural extension of classical human factors concerns, except that the new problems had substantial cognitive, communication, and interaction aspects not previously developed in human factors, forcing a growth of human factors in these directions. Ergonomics is similar to human factors, but it arose from studies of work. As with human factors, the concerns of ergonomics tended to be at the sensory-motor level, but with an additional physiological flavor and an emphasis on stress. Human interaction with computers was also a natural topic for ergonomics, but again, a cognitive extension to the field was necessary resulting in the current \"cognitive ergonomics\" and \"cognitive engineering.\" Because of their roots, ergonomic studies of computers emphasize the relationship to the work setting and the effects of stress factors, such as the routinization of work, sitting posture, or the vision design of CRT displays.\r\nIndustrial engineering arose out of attempts to raise industrial productivity starting in the early years of this century. The early emphasis in industrial engineering was in the design of efficient manual methods for work (e.g., a two-handed method for the laying of bricks), the design of specialized tools to increase productivity and reduce fatigue (e.g., brick pallets at waist height so bricklayers didn't have to bend over), and, to a lesser extent, the design of the social environment (e.g., the invention of the suggestion box). Interaction with computers is a natural topic for the scope of industrial engineering in the context of how the use of computers fit into the larger design of work methods.\r\nCognitive psychology derives from attempts to study sensation experimentally at the end of the 19th century. In the 1950's, an infusion of ideas from communications engineering, linguistics, and computer engineering led to an experimentally-oriented discipline concerned with human information processing and performance. Cognitive psychologists have concentrated on the learning of systems, the transfer of that learning, the mental representation of systems by humans, and human performance on such systems.\r\nFinally, the growth of discretionary computing and the mass personal computer and workstation computer markets have meant that sales of computers are more directly tied to the quality of their interfaces than in the past. The result has been the gradual evolution of a standardized interface architecture from hardware support of mice to shared window systems to \"application management layers.\" Along with these changes, researchers and designers have begun to develop specification techniques for user interfaces and testing techniques for the practical production of interfaces.\r\n2.2.2 Likely Future Developments {p. 10}\r\nThe means by which humans interact with computers continues to evolve rapidly. A curriculum in a changing area must be put together with some understanding of the forces shaping the future so that its concepts are not quickly out of date. Although the curriculum can always be revised in the light of greater understanding in the future, students cannot generally be recalled for retraining. They must build their own future understanding upon the foundations provided by the courses taken at the time they were students.\r\nHuman-computer interaction is, in the first instance, affected by the forces shaping the nature of future computing. These forces include:\r\n•\tDecreasing hardware costs leading to larger memories and faster systems.\r\n•\tMiniaturization of hardware leading to portability.\r\n•\tReduction in power requirements leading to portability.\r\n•\tNew display technologies leading to the packaging of computational devices in new forms.\r\n•\tAssimilation of computation into the environment (e.g., VCRs, microwave ovens, televisions).\r\n•\tSpecialized hardware leading to new functions (e.g., rapid text search).\r\n•\tIncreased development of network communication and distributed computing.\r\n•\tIncreasingly widespread use of computers, especially by people who are outside of the computing profession.\r\n•\tIncreasing innovation in input techniques (e.g., voice, gesture, pen), combined with lowering cost, leading to rapid computerization by people previously left out of the \"computer revolution.\"\r\n•\tWider social concerns leading to improved access to computers by currently disadvantaged groups (e.g., young children, the physically/visually disabled, etc.).\r\nBecause human-computer interaction involves transducers between humans and machines and because humans are sensitive to response times, viable human interfaces are more technology-sensitive than many parts of computer science. For instance, the development of the mouse gave rise to the point-and-click style of editor interface and the mouse-based graphics program. Partially based on the above trends, we expect a future for HCI with some of the following characteristics:\r\nUbiquitous communication.\r\nComputers will communicate through high speed local networks, nationally over wide-area networks, and portably via infrared, ultrasonic, cellular, and other technologies. Data and computational services will be portably accessible from many if not most locations to which a user travels.\r\nHigh functionality systems.\r\nSystems will have large numbers of functions associated with them. There will be so many systems that most users, technical or non-technical, will not have time to learn them in the traditional way (e.g., through thick manuals).\r\nMass availability of computer graphics.\r\nComputer graphics capabilities such as image processing, graphics transformations, rendering, and interactive animation will become widespread as inexpensive chips become available for inclusion in general workstations.\r\nMixed media.\r\nSystems will handle images, voice, sounds, video, text, formatted data. These will be exchangeable over communication links among users. The separate worlds of consumer electronics (e.g., stereo sets, VCRs, televisions) and computers will partially merge. Computer and print worlds will continue to cross assimilate each other.\r\nHigh-bandwidth interaction.\r\nThe rate at which humans and machines interact will increase substantially due to the changes in speed, computer graphics, new media, and new input/output devices. This will lead to some qualitatively different interfaces, such as virtual reality or computational video.\r\nLarge and thin displays.\r\nNew display technologies will finally mature enabling very large displays and also displays that are thin, light weight, and have low power consumption. This will have large effects on portability and will enable the development of paper-like, pen-based computer interaction systems very different in feel from desktop workstations of the present.\r\nEmbedded computation.\r\nComputation will pass beyond desktop computers into every object for which uses can be found. The environment will be alive with little computations from computerized cooking appliances to lighting and plumbing fixtures to window blinds to automobile braking systems to greeting cards. To some extent, this development is already taking place. The difference in the future is the addition of networked communications that will allow many of these embedded computations to coordinate with each other and with the user. Human interfaces to these embedded devices will in many cases be very different from those appropriate to workstations.\r\nGroup interfaces.\r\nInterfaces to allow groups of people to coordinate will be common (e.g., for meetings, for engineering projects, for authoring joint documents). These will have major impacts on the nature of organizations and on the division of labor. Models of the group design process will be embedded in systems and will cause increased rationalization of design.\r\nUser Tailorability.\r\nOrdinary users will routinely tailor applications to their own use and will use this power to invent new applications based on their understanding of their own domains. Users, with their deeper knowledge of their own knowledge domains, will increasingly be important sources of new applications at the expense of generic systems programmers (with systems expertise but low domain expertise).\r\nInformation Utilities.\r\nPublic information utilities (such as Compuserve, Prodigy, home banking and shopping, etc.) and specialized industry services (e.g., weather for pilots) will continue to proliferate. The rate of proliferation will accelerate with the introduction of high-bandwidth interaction and the improvement in quality of interfaces.\r\nOne consequence of the above developments is that computing systems will appear partially to dissolve into the environment and become much more intimately associated with their users' activities. One can make an analogy to the development of motion power. Once, strikingly visible, large, centralized water wheels were used to drive applications via belt drives; now electric motors are invisibly integrated into applications from VCRs to refrigerators.\r\nOf course, personal computers in some form will continue to exist (although many might take the form of electronic notebooks) and there will still be the problem of designing interfaces so that users can operate them. But the rapid pace of development means that the preparation of students must address not only the present state of technology, but also provide the foundations for future possibilities.\r\n2.3 The Content of Human-Computer Interaction {p. 13}\r\nThe aim in this section is to inventory the current state of results in the field of human-computer interaction. Our object is to delimit the scope of our concerns and to specify the connections with other fields. The discussion is not constrained by the need to distribute this content into courses or to tailor a curriculum for various sorts of students. The objective is, rather, to survey what is known that is worth teaching. Different courses might be carved out of parts of this inventory, and the program at a particular school or in any given instructional environment might wish to utilize only part of this material, together with other topics in a reorganized point of view (e.g., for a course in a design department or for a short, in-house training course for members of product development teams). For convenience, we have loosely arranged the topics in the field into 16 groups (Table 1).\r\nThe topics in this table derive from a consideration of five interrelated aspects of human-computer interaction: (N) the nature of human-computer interaction, (U) the use and context of computers, (H) human characteristics, (C) computer system and interface architecture, and (D) the development process. Although not content areas, per se, and not discussed in the inventory below, project presentations and examinations (P) have been included as a category in this table to stress the importance of having students be exposed to content both through lecture and through the process of actually working on course projects, and in recognition of the fact that in most instructional environments some sort of evaluation of student mastery of content is necessary.\r\nSome of the interrelationships among these topics are represented in Figure 1 on page 16. Computer systems exist within a larger social, organizational and work milieu (U1). Within this context there are applications for which we wish to employ computer systems (U2). But the process of putting computers to work means that the human, technical, and work aspects of the application situation must be brought into fit with each other through human learning, system tailorability, or other strategies (U3). In addition to the use and social context of computers, on the human side we must also take into account the human information processing (H1), communication (H2), and physical (H3) characteristics of users. On the computer side, a variety of technologies have been developed for supporting interaction with humans: Input and output devices connect the human and the machine (C1). These are used in a number of techniques for organizing a dialogue (C2). These techniques are used in turn to implement larger design elements, such as the metaphor of the interface (C3). Getting deeper into the machine substrata supporting the dialogue, the dialogue may make extensive use of computer graphics techniques (C4).\r\nTABLE 1. Content of HCI\r\n\tN\tThe Nature of HCI\r\n\t\tN1\t(Meta-)Models of HCI\r\n\tU\tUse and Context of Computers \r\n\t\tU1\tHuman Social Organization and Work\r\n\t\tU2 \tApplication Areas\r\n\t\tU3 \tHuman-Machine Fit and Adaptation\r\n\tH\tHuman Characteristics\r\n\t\tH1 \tHuman Information Processing\r\n\t\tH2 \tLanguage, Communication, Interaction\r\n\t\tH3 \tErgonomics\r\n\tC\tComputer System and Interface Architecture\r\n\t\tC1\tInput and Output Devices\r\n\t\tC2 \tDialogue Techniques\r\n\t\tC3 \tDialogue Genre\r\n\t\tC4 \tComputer Graphics\r\n\t\tC5\tDialogue Architecture\r\n\tD\tDevelopment Process\r\n\t\tD1 \tDesign Approaches\r\n\t\tD2\tImplementation Techniques\r\n\t\tD3 \tEvaluation Techniques\r\n\t\tD4 \tExample Systems and Case Studies\r\n\tP\tProject Presentations and Examinations\r\nComplex dialogues lead into considerations of the systems architecture necessary to support such features as interconnectable application programs, windowing, real-time response, network communications, multi-user and cooperative interfaces, and multi-tasking of dialogue objects (C5). Finally, there is the process of development which incorporates design (D1) for human-computer dialogues, techniques and tools (D2) for implementing them (D2), techniques for evaluating (D3) them, and a number of classic designs for study (D4). Each of these components of the development process is bound up with the others in a relationship of mutual, reciprocal influence whereby choices made in one area impact upon the choices and the options available in the others.\r\nThe following inventory of topics contains representative entries relating to all of these aspects of the design and analysis of human-computer interaction systems. This inventory is a current snapshot of topics on which there are results that could be taught. In addition to direct HCI topics, we have included in this inventory results from other disciplines central enough to be taught within courses in HCI. Such a list cannot hope to be complete or even non-controversial, but it should be heuristically useful in the practical business of preparing courses.\r\nFIGURE 1. Human-Computer Interaction (also available as vectorized PDF)\r\n \r\n2.3.1 Nature of Human-Computer Interaction (N) {p. 17}\r\nUnder this heading are overviews of, and theoretical frameworks for, topics in human-computer communication.\r\nN1. The Nature of Human-Computer Interaction {p. 17}\r\n•\tPoints of view: HCI as communication, agent paradigm, tool paradigm, the work-centered point of view, human/system/tasks division, supervisory control\r\n•\tObjectives (e.g. productivity, user empowerment)\r\n•\tHistory and intellectual roots\r\n•\tHCI as an academic topic: journals, literature, relation to other fields, science vs. engineering vs. design aspects\r\n2.3.2 Use and Context of Computers (U) {p. 17}\r\nThe uses to which computers are put are spoken of as 'applications' in the computer world. These uses and the extent to which the interface (and the application logic in the rest of the system) fits them can have a profound impact on every part of the interface and its success. Moreover, the general social, work, and business context may be important. In addition to technical requirements, an interface may have to satisfy quality-of-work-life goals of a labor union or meet legal constraints on \"look and feel\" or position the image of a company in a certain market. The following topics are concerned with general problems of fitting computers, uses, and context of use together.\r\nU1. Social Organization and Work {p. 18}\r\nThis heading relates to the human as an interacting social being. It includes a concern with the nature of work, and with the notion that human systems and technical systems mutually adapt to each other and must be considered as a whole.\r\n•\tPoints of view (e.g., industrial engineering, operations research, Rasmussen's cognitive engineering, the Aarhus participatory design approach, Hewitt's open systems)\r\n•\tModels of human activity (e.g., opportunistic planning, open procedures)\r\n•\tModels of small-groups, organizations\r\n•\tModels of work, workflow, cooperative activity, office work\r\n•\tSocio-technical systems, human organizations as adaptive open systems, mutual impact of computer systems on work and vice versa, computer systems for group tasks, case studies\r\n•\tQuality of work life and job satisfaction\r\nU2. Application Areas {p. 18}\r\nThe focus of this section is on classes of application domains and particular application areas where characteristic interfaces have developed.\r\n•\tCharacterization of application areas (e.g., individual vs. group, paced vs. unpaced)\r\n•\tDocument-oriented interfaces: Text-editing, document formatting, illustrators, spreadsheets, hypertext\r\n•\tCommunications-oriented interfaces: Electronic mail, computer conferencing, telephone and voice messaging systems\r\n•\tDesign environments: programming environments, CAD/CAM\r\n•\tOn-line tutorial systems and help systems\r\n•\tMultimedia information kiosks\r\n•\tContinuous control systems: process control systems, virtual reality systems, simulators, cockpits, video games\r\n•\tEmbedded systems: Copier controls, elevator controls, consumer electronics and home appliance controllers (e.g., TVs, VCRs, microwave ovens, etc.)\r\nU3. Human-Machine Fit and Adaptation {p. 19}\r\nPart of the purpose of design is to arrange a fit between the designed object and its use. There are several dimensions to this fit and it is possible to place the burden of adjustment in different places: Adjustments can be made (1) either at design time or at time of use (2) by either changing the system or the user and (3) the changes can be made by either the users themselves or, sometimes, by the system. Topics under this heading all relate to changing some component of a socio-technical system so as to improve its fit.\r\n•\tAlternate techniques for achieving fit\r\n•\tNature of adaptive systems, adaptations of human systems that cancel reliability improvements, the nature of error in adaptive redundant systems, empirical findings on user improvisation with routine systems, determinants of successful systems introduction,\r\n•\tSystem selection: theories of system adoption\r\n•\tSystem adaptation: customization and tailorability techniques\r\n•\tUser selection: compatibilities of user and system characteristics\r\n•\tUser adaptation: ease of learning, training methods (e.g., on-line tutorials), relation to system design\r\n•\tUser guidance: help techniques, documentation, error-handling techniques\r\n2.3.3 Human Characteristics (H) {p. 20}\r\nIt is important to understand something about human information-processing characteristics, how human action is structured, the nature of human communication, and human physical and physiological requirements.\r\nH1. Human Information Processing {p. 20}\r\nCharacteristics of the human as a processor of information.\r\n•\tModels of cognitive architecture: symbol-system models, connectionist models, engineering models\r\n•\tPhenomena and theories of memory\r\n•\tPhenomena and theories of perception\r\n•\tPhenomena and theories of motor skills\r\n•\tPhenomena and theories of attention and vigilance\r\n•\tPhenomena and theories of problem solving\r\n•\tPhenomena and theories of learning and skill acquisition\r\n•\tPhenomena and theories of motivation\r\n•\tUsers' conceptual models\r\n•\tModels of human action\r\n•\tHuman diversity, including disabled populations\r\nH2. Language, Communication and Interaction {p. 21}\r\nLanguage as a communication and interface medium. Communication phenomena.\r\n•\tAspects of language: syntax, semantics, pragmatics\r\n•\tFormal models of language\r\n•\tPragmatic phenomena of conversational interaction (e.g., turn-taking, repair)\r\n•\tLanguage phenomena\r\n•\tSpecialized languages (e.g., graphical interaction, query, command, production systems, editors)\r\n•\tInteraction reuse (e.g., history lists)\r\nH3. Ergonomics {p. 21}\r\nAnthropometric and physiological characteristics of people and their relationship to workspace and environmental parameters.\r\n•\tHuman anthropometry in relation to workspace design\r\n•\tArrangement of displays and controls, link analysis\r\n•\tHuman cognitive and sensory limits\r\n•\tSensory and perceptual effects of CRT and other display technologies, legibility, display design\r\n•\tControl design\r\n•\tFatigue and health issues\r\n•\tFurniture and lighting design\r\n•\tTemperature and environmental noise issues\r\n•\tDesign for stressful or hazardous environments\r\n•\tDesign for the disabled\r\n2.3.4 Computer System and Interface Architecture (C) {p. 22}\r\nMachines have specialized components for interacting with humans. Some of these components are basically transducers for moving information physically between human and machine. Other components have to do with the control structure and representation of aspects of the interaction. These specialized components are covered in the following topics.\r\nC1. Input and Output Devices {p. 22}\r\nThe technical construction of devices for mediating between humans and machines.\r\n•\tInput devices: survey, mechanics of particular devices, performance characteristics (human and system), devices for the disabled, handwriting and gestures, speech input, eye tracking, exotic devices (e.g., EEG and other biological signals)\r\n•\tOutput devices: survey, mechanics of particular devices, vector devices, raster devices, frame buffers and image stores, canvases, event handling, performance characteristics, devices for the disabled, sound and speech output, 3D displays, motion (e.g., flight simulators), exotic devices\r\n•\tCharacteristics of input/output devices (e.g., weight, portability, bandwidth, sensory modality)\r\n•\tVirtual devices\r\nC2. Dialogue Techniques {p. 22}\r\nThe basic software architecture and techniques for interacting with humans.\r\nDialogue Inputs:\r\n•\tTypes of input purposes (e.g., selection, discrete parameter specification, continuous control)\r\n•\tInput techniques: keyboard techniques (e.g, commands, menus), mouse-based techniques (e.g., picking, rubber-band lines), pen-based techniques (e.g., character recognition, gesture), voice-based techniques\r\nDialogue Outputs:\r\n•\tTypes of output purposes (e.g., convey precise information, summary information, illustrate processes, create visualizations of information)\r\n•\tOutput techniques (e.g., scrolling display, windows, animation, sprites, fish-eye displays)\r\n•\tScreen layout issues (e.g., focus, clutter, visual logic)\r\nDialogue Interaction Techniques:\r\n•\tDialogue type and techniques (e.g., alphanumeric techniques, form filling, menu selection, icons and direct manipulation, generic functions, natural language)\r\n•\tNavigation and orientation in dialogues, error management\r\n•\tMultimedia and non-graphical dialogues: speech input, speech output, voice mail, video mail, active documents, videodisc, CD-ROM\r\n•\tAgents and AI techniques\r\n•\tMulti-person dialogues\r\nDialogue Issues:\r\n•\tReal-time response issues\r\n•\tManual control theory\r\n•\tSupervisory control, automatic systems, embedded systems\r\n•\tStandards\r\n•\t\"Look and feel,\" intellectual property protection\r\nC3. Dialogue Genre {p. 24}\r\nThe conceptual uses to which the technical means are put. Such concepts arise in any media discipline (e.g., film, graphic design, etc.).\r\n•\tInteraction metaphors (e.g., tool metaphor, agent metaphor)\r\n•\tContent metaphors (e.g., desktop metaphor, paper document metaphor)\r\n•\tPersona, personality, point of view\r\n•\tWorkspace models\r\n•\tTransition management (e.g., fades, pans)\r\n•\tRelevant techniques from other media (e.g., film, theater, graphic design)\r\n•\tStyle and aesthetics\r\nC4. Computer Graphics {p. 24}\r\nBasic concepts from computer graphics that are especially useful to know for HCI.\r\n•\tGeometry in 2- and 3- space, linear transformations\r\n•\tGraphics primitives and attributes: bitmap and voxel representations, raster-op, 2-D primitives, text primitives, polygon representation, 3-D primitives, quadtrees and octtrees, device independent images, page definition languages\r\n•\tSolid modeling, splines, surface modeling, hidden surface removal, animation, rendering algorithms, lighting models\r\n•\tColor representation, color maps, color ranges of devices\r\nC5. Dialogue Architecture {p. 25}\r\nSoftware architectures and standards for user interfaces.\r\n•\tLayers model of the architecture of dialogues and windowing systems, dialogue system reference models\r\n•\tScreen imaging models (e.g., RasterOp, Postscript, Quickdraw)\r\n•\tWindow manager models (e.g., Shared address-space, client-server), analysis of major window systems (e.g., X, New Wave, Windows, Open Look, Presentation Manager, Macintosh)\r\n•\tModels of application-to-dialogue manager connection\r\n•\tModels for specifying dialogues\r\n•\tMulti-user interface architectures \"Look and feel\"\r\n•\tStandardization and interoperability\r\n2.3.5 Development Process (D) {p. 25}\r\nThe construction of human interfaces is both a matter of design and engineering. These topics are concerned with the methodology and practice of interface design. Other aspects of the development process include the relationship of interface development to the engineering (both software and hardware) of the rest of the system.\r\nD1. Design Approaches {p. 25}\r\nThe process of design. Relevant topics from other design disciplines.\r\n•\tGraphic design basics (e.g., design languages, typography, use of color, 2D & 3D spatial organization, temporal sequencing, etc.)\r\n•\tAlternative system development processes (e.g., waterfall model, participatory design), lifecycle model, iterative design, choice of method under time/resource constraint\r\n•\tTask analysis techniques (e.g., field studies, analytical methods), task allocation, market analysis\r\n•\tDesign specification techniques\r\n•\tDesign analysis techniques (e.g., objects and actions)\r\n•\tIndustrial design basics\r\n•\tDesign case studies and empirical analyses of design\r\nD2. Implementation Techniques and Tools {p. 26}\r\nTactics and tools for implementation.\r\n•\tRelationships among design, evaluation, and implementation\r\n•\tIndependence and reusability, application independence, device independence\r\n•\tPrototyping techniques (e.g., storyboarding, video, \"Wizard of Oz\", HyperCard, rapid prototype implementations)\r\n•\tDialogue toolkits (e.g., MacApp, NextStep, UIMS's, HyperCard)\r\n•\tObject-oriented methods\r\n•\tData representation and algorithms\r\nD3. Evaluation Techniques {p. 26}\r\nPhilosophy and specific methods for evaluations.\r\n•\tProductivity\r\n•\tFigures of merit (e.g., time, errors, learnability, design for guessing, preference, etc.)\r\n•\tUsability testing techniques, linking testing to specifications\r\n•\tFormative and summative evaluation techniques for empirical evaluation, including, field observation methods, participant observation, interviewing techniques, questionnaire design, psychometric methods, video protocols, system logging, experiment design (e.g, concern with sample bias, etc.), methods from psychological and sociological evaluation fields, ethics of working with participants\r\nD4. Example Systems and Case Studies {p. 27}\r\nClassic designs to serve as extended examples of human interface design.\r\nCommand-oriented:\r\n•\tOS/360 JCL (batch-oriented command style, baseline for seeing later improvements)\r\n•\tPC DOS (command style interface learned by millions)\r\n•\tAirline check-in system (time pressure, ambiguous input, distributed system)\r\nGraphics-oriented:\r\n•\tXerox Star (icon-window interface, generic commands)\r\n•\tApple Macintosh (similar interface over many applications)\r\n•\tMacPaint (widely known and available graphics program)\r\nFrame-based:\r\n•\tPromis (Rapid response to large set of frames, touch-panel oriented)\r\n•\tZog (User-tailorable, rapid-response system, large number of frames, first commercial frame-based system)\r\n•\tHyperCard (Graphically-oriented frame-based system with user programming language, first mass market frame-oriented system).\r\nUser-defined combinatorics:\r\n•\tUnix operating system (strong combinatoric architecture paired with weak human factors)\r\n•\tEmacs (language-oriented, large combinatoric command set)\r\n•\tVisicalc (a \"home-run\" application with strong conceptual model that succeeded despite weak human factors)\r\n•\tDBaseIII (simple, but successful, user applications generator)\r\n•\tInterfaces for untrained, walk-up users:\r\n•\tOlympic Message System (practical use of user testing under time pressure)\r\n•\tNintendo Super Mario Brothers (learnable without a manual by grade school children)\r\nThe topics listed in this chapter constitute an attempt to inventory the results of HCI and its supporting fields that are available for teaching. The topics are not arranged according to how they would appear in courses. Rather, they are the raw material out of which courses and curricula might be fashioned and recommendations for such courses and curricula are provided in Chapters 3 and 4. However, HCI as a field is continuing to develop rapidly. It is expected, therefore, that the above topics will undergo change as new results occur and as our understanding of the area deepens. New paradigms will emerge as our fundamental concepts evolve, become more clearly articulated, and spin off entirely new subtopics. These changes will necessitate continual revision of courses and curricula as new topics and results emerge. \r\n\r\n\r\n\r\nHCI and Psychology\r\nHCI and Psychology – an introduction\r\n\r\nInteraction with a computer is the same as interaction with information\r\nwhich involves processing of information in the brain which in turn\r\ninvolves cognitive processes. So, cognitive psychology and system design\r\nare interlinked to ensure that this information processing activity is\r\nwithin users' capabilities.\r\nCognitive psychology can be applied to improve system design:-\r\nto provide knowledge of user's capabilities\r\nto identify and explain user problems\r\nto supply modelling tools\r\n\r\nYou Need a Psychologist to Teach HCI Correctly to a Computer Scientist\r\nFor the first time since its inauguration, IFIP's conference on human\r\ncomputer interaction, INTERACT, made its way to the southern hemisphere.\r\nINTERACT'97 was held in Sydney, Australia, in July, and incorporated two\r\nregional conferences, OZCHI97 and APCHI97. The theme of the conference\r\nwas \"Discovering New Worlds of HCI\" which drew participants from all\r\nover the globe and from a wide range of disciplines.\r\n\r\nIt was this range of disciplines which set the scene for a lively\r\ndiscussion in the opening panel session where the proposition was put\r\nforward that a psychologist is needed to teach HCI correctly to computer\r\nscientists.\r\n\r\nIf HCI is to be successfully adopted and practised in industry, software\r\ndevelopers will require some form of education or training in this area.\r\nThe question remains as to who should be providing this teaching -- a\r\npsychologist, or a computer scientist? The panel and audience grappled\r\nwith a number of questions during the course of the session. As well as\r\nthe question of exactly who should be responsible for the teaching of\r\nmaterial, other related issues were discussed including who should be\r\nresponsible for the content, what material should be presented, and how\r\nit should be taught.\r\n\r\nIn attempting to address the main question, it was not surprising that\r\nthe related question of what needs to be taught to these individuals was\r\nraised a number of times. While it is not possible to teach computer\r\nscience students everything they will need to know about HCI, it was\r\nrecognised that a key objective is to increase the awareness of students\r\nof their own limitations and the boundaries of their discipline so that\r\nthey learn to ask important questions and raise relevant issues during\r\nthe course of their practice. Ideally, the student should be taught to\r\ndraw from the knowledge provided by external disciplines and be able to\r\napply it to the problem at hand. The material taught needs to be\r\nwell-focussed and provide students with a strong sense of what HCI is\r\nabout and what it tries to achieve. It needs to be directly relevant to\r\nthe capabilities and needs of the students to whom it is presented, and\r\nable to be used in industry both currently and in the long term.\r\n\r\nComputer science students by their nature were recognised as having a\r\nrigid approach in their thinking and reasoning. This can give rise to\r\nincompatibilities between the more qualitative nature of psychological\r\nknowledge and the more quantitative heuristics needed by software\r\ndevelopers. While computer scientists may be able to communicate to\r\ntheir students at this level, there is a danger that they may misapply\r\npsychological knowledge or oversimplify human behaviour. An example was\r\ngiven where a computer scientist had taught a class that graphical user\r\ninterfaces were bad when they had more than seven items which was\r\nthought to be in conflict with Miller's recommendation for short-term\r\nmemory.\r\n\r\nIt was pointed out by both sides that no single person is likely to be\r\nable to give a comprehensive picture of HCI as a whole. Computer\r\nscientists are likely to have a poor understanding of areas in the\r\nsocial sciences. Psychologists are likely to have a poor understanding\r\nof the software engineering context required to build systems. Even\r\nmulti-disciplinary academics and practitioners can have their own\r\nspecific prejudices due to their limited perspectives on HCI. So where\r\ndoes the solution lie? Two general approaches were offered. The first\r\nmakes use of a team of individual specialists to provide a broad scope.\r\nThe second recognises HCI as a discipline in its own right which needs\r\nto be taught by those who understand HCI as a whole, rather than just\r\nspecific components. However, neither of these approaches were seen as\r\nbeing particularly easy to implement.\r\n\r\nFinally, the question of how the material should be taught was also\r\nposed. The notion of trying to integrate the teaching and assessment of\r\nHCI components throughout the entire curriculum rather than just in\r\nisolated units was supported. For example, a number of marks could be\r\nspecifically allocated towards usability in programming assignments. In\r\naddition, there was a recognised need to place students in large and\r\nrealistic projects, possibly as a result of partnerships between\r\nindustry and universities.\r\n\r\nThere appears to be significant parallels between HCI education and the\r\nHCI discipline as a whole. Firstly, as HCI struggles to define itself,\r\nHCI education needs to focus its scope and objectives. Secondly, as\r\nindustry and academia look to match results and needs, students need to\r\ndistinguish between what HCI can do, and what it does in practice.\r\nThirdly, as each of the HCI component disciplines search for common\r\nground, students need to be taught to recognise the boundaries and be\r\nable to apply the relevant information to the problem at hand. With such\r\nhigh goals, perhaps a more pertinent question is, \"Who is the most\r\nappropriate person to teach HCI to the teachers?\"\r\n\r\nPanel Organiser: Marilyn Mantei, Canada\r\nChair: Penny Collings, Australia\r\nPanelists: Tom Hewett, USA; Andrew Monk, UK; Lorraine Johnston,\r\nAustralia; Mark Apperley, New Zealand\r\n\r\nPaul Chesson is completing a Ph.D. at the University of Melbourne,\r\nAustralia, in the area of formal methods in HCI. His research involves\r\nthe development of a dialogue specification language for interactive\r\nsystems, and a supporting method and tools for its use. He holds a B.E.\r\nfrom Melbourne in software engineering. Email: chesson@cs.mu.oz.au\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}